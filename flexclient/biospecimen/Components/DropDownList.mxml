<?xml version="1.0" encoding="utf-8"?>
<!--////////////////////////////////////////////////////////////////////////////////
//
// @file: DropDownList.mxml
// @author: Jignesh Wala
// @date: 27-11-2008
// @description: List control which will be used with popup manager to call from parent application.
//
//////////////////////////////////////////////////////////////////////////////// -->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="40%" height="40%">
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import mx.events.FlexEvent;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			import mx.events.CollectionEvent;
			import util.PagedArrayCollection;
			import valueobjects.NameValueBean;
			import mx.managers.CursorManager;

			[Bindable]
			public var filteredListArray:Array;

			[Bindable]
    		public var collection:PagedArrayCollection;

			[Bindable]
   			public var parentInstance:String;

   			/**
   			 	filterList function is searching text from array to create a new PagedArrayCollection for paginated list items.
   			*/
			public function filterList(txtEntered:String,arrTemp:Array) : void
			{
				filteredListArray = new Array();
				for(var i : int = 0 ; i < arrTemp.length; i++)
				{
					var strText:String=arrTemp[i].name.toString();
					if(strText.toUpperCase().search(txtEntered.toUpperCase()) >= 0)
					{
						filteredListArray.push(arrTemp[i]);
					}
				}
				pagedInitialize(filteredListArray);
			}

			/**
   			 	onItemsChange function is trapping CollectionEvent depends on change of data provider
   			*/
			private function onItemsChange( event:CollectionEvent ) : void
	   		{
	    		//trace( event.kind +" collectionchanged" );
	   		}

	   		/**
   			 	pagedInitialize function is creating paged array and assinging to list dataprovider to list.
   			*/
			public function pagedInitialize(arr : Array):void{
					this.collection = new PagedArrayCollection(arr);
					this.collection.addEventListener( CollectionEvent.COLLECTION_CHANGE, onItemsChange );
					this.collection.refresh();
					dropDownList.dataProvider = collection;
	  		}

	  		/**
   			 	moveLast function is moving Last page of paged array in list dropdown.
   			*/
	  		public function moveLast():void{
	  			while(collection.numberOfPages > collection.currentPage)
	  				collection.currentPage ++ ;
	  		}

	  		/**
   			 	moveLast function is moving First page of paged array in list dropdown.
   			*/
	  		public function moveFirst():void{
	  			while(collection.currentPage > 1)
	  				collection.currentPage -- ;
	  		}

	  		/**
   			 	moveLast function is moving page to specified page of paged array in list dropdown.
   			*/
	  		public function movePgNum(event:Event):void{
	  			var pgnum:int = parseInt(pgNum.text);
	  			if(collection.numberOfPages >= pgnum && pgnum != 0){
	  				while(collection.currentPage < pgnum)
	  					collection.currentPage ++ ;

	  				while(collection.currentPage > pgnum)
	  					collection.currentPage -- ;
	  			}
	  		}

	  		/**
   			 	listCloseEvent function is providing functionality to close dropdown when item got selected.
   			*/
	  		public function listCloseEvent():void{
	  			if(parentInstance == "Cp"){
	  				dropDownListDPCollection();
		  		}else{
		  			dropDownListDPSpec();
		  		}
	  		}

	  		/**
   			 	dropDownListDPCollection function is changing CP dataprovider depending on item selection.
   			*/
	  		public function dropDownListDPCollection():void{
	  				this.parentApplication.Cp.inputArea.text=dropDownList.selectedItem.name;
	  				PopUpManager.removePopUp(this);
	  				this.parentApplication.Cp.dropList=null;
		  			this.parentApplication.cpCombo = collection[dropDownList.selectedIndex];
		  			CursorManager.setBusyCursor();
		  			this.parentApplication.onCpChange();
		  			CursorManager.removeBusyCursor();
		  			this.parentApplication.Sp.inputArea.text="";
	  		}

	  		/**
   			 	dropDownListDPSpec function is changing participant dataprovider depending on item selection.
   			*/
	  		public function dropDownListDPSpec():void{
	  				this.parentApplication.Sp.inputArea.text=dropDownList.selectedItem.name;
	  				PopUpManager.removePopUp(this);
	  				this.parentApplication.Sp.dropList=null;
	  				this.parentApplication.spCombo = collection[dropDownList.selectedIndex];

	  				//this.parentApplication.spComboSelectedIndex = dropDownList.selectedIndex;
	  				//Get selecteditem as namevalue bean. From full list of Participant - Pcollection
					//get index of selected participant set it as spcomob selected index
					var selPartbean:NameValueBean  = dropDownList.selectedItem as NameValueBean;

					for(var i:Number=0; i<this.parentApplication.pCollection.length; i++)
	 				{
	 					var tempbean:NameValueBean = this.parentApplication.pCollection[i] as NameValueBean;
		 				if(tempbean.value==selPartbean.value)
	 					{
	 						this.parentApplication.spComboSelectedIndex = i;
		 					break;
		 				}
		 			}

					CursorManager.setBusyCursor();
	  				this.parentApplication.onParticipantClick();
	  				CursorManager.removeBusyCursor();
	  		}

	  		/**
   			 	keyBoardSelectionHandler function is selecting item from dropdown list.
   			*/
	  		public function keyBoardSelectionHandler(event:KeyboardEvent):void{
	  			if(dropDownList.selectedIndex != -1){
	  				if(event.keyCode == Keyboard.ENTER){
	  					listCloseEvent();
	  				}
	  			}
	  		}

		]]>
	</mx:Script>
	<mx:VBox id="dropdownPage" name="dropdownPage" width="100%" height="100%"
		verticalGap="0" left="-10" right="-10" top="-10" bottom="-10">
		<mx:List id="dropDownList" name="dropDownList" width="100%" height="90%"
			itemClick="listCloseEvent();" keyDown="keyBoardSelectionHandler(event);"
			labelField="name" rowCount="10" itemRenderer="mx.controls.Label"></mx:List>
		<mx:ApplicationControlBar width="100%" height="10%" dock="true" verticalGap="0" horizontalGap="4" horizontalAlign="center" verticalAlign="middle" >
			<mx:Button click="moveFirst();" icon="@Embed(source='../images/page-first.gif')"/>
			<mx:Button enabled="{ collection.currentPage > 1 }" click="{ collection.currentPage-- }" icon="@Embed(source='../images/page-prev.gif')"/>
			<mx:TextInput id="pgNum" text="{collection.currentPage}" restrict="0-9" enter="movePgNum(event);" width="30"/>
			<mx:Label text="of {collection.numberOfPages}"/>
			<mx:Button enabled="{ collection.numberOfPages > collection.currentPage }" click="{ collection.currentPage++ }" icon="@Embed(source='../images/page-next.gif')"/>
			<mx:Button click="moveLast();" icon="@Embed(source='../images/page-last.gif')"/>
		</mx:ApplicationControlBar>
	</mx:VBox>
</mx:VBox>
