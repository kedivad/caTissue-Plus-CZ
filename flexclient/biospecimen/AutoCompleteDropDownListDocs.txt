<!--////////////////////////////////////////////////////////////////////////////////
//
// @file: AutoCompeleteDropDownListDocs.txt
// @author: Jignesh Wala
// @date: 04-12-2008
// @description: documentation to implement custom component with other application.
// @version : 1.0
//////////////////////////////////////////////////////////////////////////////// -->

AutoCompeleteDropDownList - gives text search from list and returns matching text with paginated list.

package structure:
Components
 + DropDownList.mxml - UI container of List and ApplicationControlBar for pagination bar.
 + AutoCompeleteDropDownList.mxml - UI container of TextInput and Button for text input and dropdown open/close.
 
Util
 + IPagedArrayCollection.as - interface for pagedArrayCollection.
 + PagedArrayCollection.as - implementation of IPagedArrayCollection for paginate Array type data. 
 + PagedCollectionEventKind.as - event handler class when Array data change.
 
steps to implement custom component with other application :

1) import namespace as xmlns:Components="Components.*" in application tag.

2) <Components:AutoCompeleteDropDownList id="Sp" name="compSpec" width="100%" height="5%" cDataProvider="{pCollection.toArray()}" parentInstance="Sp"/> 
	id - which is nothing but reference of component.
	name - name is also same as id.
	width - component width.
	height - componet height.
	cDataProvider - Dataprovider of the component which is Array type data for dropdown list
	parentInstance - parentInstance is a property which contains instance of component when it is used multiple times in same containe or view.

3) Add closeDropDownList function in parent application to handler MouseEvent for triggering close event of dropdownlist.

   private function closeDropDownList(event:Event):void{
    if(String(event.target.name.toString()).search("SpriteAsset") == -1)    
    	if(event.target.className != "ScrollThumb" && event.target.className != "ApplicationControlBar" && event.target.className != "UITextField" && event.target.className != "Button"){   
	    	if(Cp.dropList != null){
	    		PopUpManager.removePopUp(Cp.dropList);
	    		Cp.dropList=null;
	    	}
    	}
    }	

4) Provide labelField="" property value depends on your Array data. 
	eg. myarray=[name:'abc',value:10] then labelfield must be name or value.