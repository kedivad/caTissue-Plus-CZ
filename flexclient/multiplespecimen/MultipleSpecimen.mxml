<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" horizontalAlign="left" xmlns:local="*" preinitialize="preInit()" creationComplete="creationComp()" xmlns:components="components.*" backgroundColor="white" paddingTop="0">
	<mx:Style source="../defaltTheme.css"/>
<mx:Script>
	<![CDATA[
		import util.Utility;
		import util.MetadataModel;
		import mx.messaging.management.Attribute;
		import util.Constants;
		import util.Utility;
		import mx.managers.HistoryManager;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.AbstractOperation;
		import mx.messaging.ChannelSet;
		import util.MSPParameter;
		import util.MSPParameterReader;
		import util.MetadataManager;
		import mx.events.DragEvent;
		import flash.utils.setInterval;
		import mx.managers.PopUpManager;
		import valueobjects.SpecimenData;
		
		import mx.rpc.events.ResultEvent;
		import flash.utils.getQualifiedClassName;
		import mx.controls.Alert;
		import mx.collections.ArrayCollection;
		
		import flash.utils.getQualifiedClassName;
		import mx.controls.Alert;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.remoting.mxml.RemoteObject;
		import pagination.utils.PaginateData;
		import pagination.managers.ModelManager;


		private var counter:int = 1;
//		private var mspParameter:MSPParameter ;
		[Bindable]
		public var mspParameter:MSPParameter = new MSPParameter();	
		[Bindable]
		public var specimenColl:ArrayCollection = new ArrayCollection();

		[Bindable]
		public var actualParentType:String = "";
		[Bindable]
		public var actualParentName:String = "";

		public var specimenDataBean:SpecimenData = new SpecimenData();
		private var copyFromIndex:int = -1;
		private var attributeList:ArrayCollection = null;
		
		public var metadataManager:MetadataManager = new MetadataManager();
	

		public static var PERPAGE:int = 3;
		public var currPage:int = 1;
		
		public var showParentSelection:Boolean = true;
		[Bindable]
		public var startingIndex:int = 0;
		
		[Bindable] public var paginateData:PaginateData = new PaginateData();
		[Bindable] public var model:ModelManager = ModelManager.getInstance();


		private function preInit():void
		{
			myRemoteObject.channelSet = Utility.getChannelSet();
			
			model.collection = specimenColl;
			model.filteredCollection = specimenColl;
			mspParameter = MSPParameterReader.processParam(Application.application.parameters);
			specimenColl = new ArrayCollection();

			actualParentType=mspParameter.parentType;
			actualParentName=mspParameter.parentName;

			myRemoteObject.initFlexInterfaceForMultipleSp(mspParameter.mode,mspParameter.parentType,mspParameter.parentName);

		}
		
		private function init(event:Event):void
		{

			
			if(mspParameter.mode == MSPParameter.MODE_PARAM_VAL_ADD)
			{
				specimenColl = new ArrayCollection();
				var spCounts:int = int(mspParameter.spCount);
				for(var i:int=0; i<spCounts; i++)
				{
					
					addMoreSpecimen(null);
				}
			}
			else
			{
				specimenColl = metadataManager.spDataList;
				
				if(specimenColl==null)
				{
					specimenColl = new ArrayCollection();
					addMoreSpecimen(null);
				}
				
			}	
			
			model.collection = specimenColl;
			model.currPage = 0;		
			model.pageLimit = 4;		
			model.filteredCollection  = getFilteredCollection(model.collection,model.currPage);
			paginateData.paginate(model.collection, this.hbContainer, model.pageLimit);

			
		}
		
		private function initSpecimenData(): SpecimenData
		{

			var spData:SpecimenData = new SpecimenData("","","Vlevo");	
			if(mspParameter.showLabel == "false")
			{
				spData.specimenLabel = "Vygenerováno";
			}
			spData.mode= mspParameter.mode;
			spData.collectionEvent.userName = specimenDataBean.collectionEvent.userName;
			
			if(showParentSelection == true)
				spData.isParentEnabled = true;
			else
				spData.isParentEnabled = false;	
				
			spData.receivedEvent.userName = specimenDataBean.receivedEvent.userName;
			counter++;

			if(mspParameter.parentType==MSPParameter.PARENT_TYPE_PARAM_VAL_SCG)
			{
				spData.parentType = Constants.NEW_SPECIMEN;
				spData.parentName = mspParameter.parentName;
				setScgEvents(spData);
			}
			else
			{
				spData.parentType = Constants.DERIVED_SPECIMEN;
				spData.parentName = mspParameter.parentName;				
			}
			return spData;
		}
		private function setScgEvents(spData:SpecimenData):void
		{
			spData.copyCollectedEvent(specimenDataBean.collectionEvent);
			spData.copyReceivedEvent(specimenDataBean.receivedEvent);
		}		
		private function creationComp():void
		{
			if(mspParameter.mode == MSPParameter.MODE_PARAM_VAL_EDIT)
			{
				addMoreBtn.visible = false;
				deleteBtn.visible = false;
				showParentSelection = false;
			}
			setPagination();	
			selectionBox.visible = showParentSelection;
			if(mspParameter.parentType == MSPParameter.PARENT_TYPE_PARAM_VAL_SP)
			{
				spParent.selectedValue = "Odvozený vzorek";
				spLabelPane.spOrScg.text = "* Název Nadřazeného ";
			}
			else
			{
				spParent.selectedValue = "Nový vzorek";
				spLabelPane.spOrScg.text = "* Název Kolekce vzorků";
			}
			

		}

		private function addMoreSpecimen(event:Event):void
		{
			var spData:SpecimenData = initSpecimenData();
			specimenColl.addItem(spData);	
			setPagination();
			model.filteredCollection = getFilteredCollection(model.collection,model.currPage);
			
			if(isSpParentName.selected)
	   		{
	   		   refreshParentLabel(spData);
	   		}
	   		else
	   		{
	   		  refreshSCGLabel(spData);
	   		}
	   		

		}
		
		
		private function deleteSpecimen(event:Event) : void
		{
			for(var i:int=(specimenColl.length-1);i>=0;i--)
			{
				var spData:SpecimenData = SpecimenData(specimenColl.getItemAt(i));
				if(spData.isSelected)
				{
					specimenColl.removeItemAt(i);
					
				}
			}	
			setPagination();
			model.filteredCollection  = getFilteredCollection(model.collection,model.currPage);

			
		}
		 private function getFilteredCollection(collection:ArrayCollection,currPage:int) : ArrayCollection
		{
			var filteredColl:ArrayCollection = new ArrayCollection();
			var lowLimit:int = currPage*model.pageLimit;
			if((currPage*model.pageLimit + model.pageLimit) <collection.length)
			{
				filteredColl = paginateData.getPaginatedData(collection, lowLimit, (currPage*model.pageLimit + (model.pageLimit-1)));
			}
			else
			{
				filteredColl = paginateData.getPaginatedData(collection, lowLimit, collection.length-1);
			}
			return filteredColl;
		}
		private function copySPData(event:Event):void
		{
			copyFromIndex = -1;
			for(var i:int;i<specimenColl.length;i++)
			{
				var spData:SpecimenData = SpecimenData(specimenColl.getItemAt(i));
 			    if(spData.isSelected)
				{
					copyFromIndex = i;
					spData.isSelected = false;
					break;
				}
			}
			
			if(copyFromIndex == -1)
			{
				copyAttributes();
				
			}
		}
		
		/* this function copy the attributes of first specime to be copied to other specimens */
		private function copyAttributes() : void
		{
			attributeList= new ArrayCollection();
			if(spLabelPane.nameChkBox.selected)
			{
				attributeList.addItem(Constants.PARENT_NAME);	
				spLabelPane.nameChkBox.selected = false;
			}
			if(spLabelPane.labelChkBox.selected)
			{
				attributeList.addItem(Constants.LABEL);	
				spLabelPane.labelChkBox.selected = false;
			}
			if(spLabelPane.barcodeChkBox.selected)
			{
				attributeList.addItem(Constants.BARCODE);
				spLabelPane.barcodeChkBox.selected = false;
			}
			if(spLabelPane.classChkBox.selected)
			{
				attributeList.addItem(Constants.CLASS);
				spLabelPane.classChkBox.selected = false;
			}
			if(spLabelPane.typeChkBox.selected)
			{
				attributeList.addItem(Constants.TYPE);
				spLabelPane.typeChkBox.selected = false;
			}
			if(spLabelPane.tissueSiteChkBox.selected)
			{
				attributeList.addItem(Constants.TISSUE_SITE);
				spLabelPane.tissueSiteChkBox.selected = false;
			}
			if(spLabelPane.tissueSideChkBox.selected)
			{
				attributeList.addItem(Constants.TISSUE_SIDE);
				spLabelPane.tissueSideChkBox.selected = false;
			}
			if(spLabelPane.pathStatusChkBox.selected)
			{
				attributeList.addItem(Constants.PATHOLOGICAL_STATUS);
				spLabelPane.pathStatusChkBox.selected = false;
			}
			if(spLabelPane.createdOnChkBox.selected)
			{
				attributeList.addItem(Constants.CREATED_ON);
				spLabelPane.createdOnChkBox.selected = false;
			}
			if(spLabelPane.quantityChkBox.selected)
			{
				attributeList.addItem(Constants.QUANTITY);
				spLabelPane.quantityChkBox.selected = false;
			}
			if(spLabelPane.concentrationChkBox.selected)
			{
				attributeList.addItem(Constants.CONCENTRATION);
				spLabelPane.concentrationChkBox.selected = false;
			}
			if(spLabelPane.storageChkBox.selected)
			{
				attributeList.addItem(Constants.STORAGE);
				spLabelPane.storageChkBox.selected = false;
			}
			if(spLabelPane.commentChkBox.selected)
			{
				attributeList.addItem(Constants.COMMENT);
				spLabelPane.commentChkBox.selected = false;
			}
			if(spLabelPane.collEventChkBox.selected)
			{
				attributeList.addItem(Constants.COLLECTED_EVENT);
				spLabelPane.collEventChkBox.selected = false;
			}
			if(spLabelPane.recEventChkBox.selected)
			{
				attributeList.addItem(Constants.RECEIVED_EVENT);
				spLabelPane.recEventChkBox.selected = false;
			}
			if(spLabelPane.externalIdChkBox.selected)
			{
				attributeList.addItem(Constants.EXTERNAL_IDENTIFIER);
				spLabelPane.externalIdChkBox.selected = false;
			}
		
			if(spLabelPane.biohazardChkBox.selected)
			{
				attributeList.addItem(Constants.BIOHAZARDS);
				spLabelPane.biohazardChkBox.selected = false;
			}
			if(spLabelPane.derivativeChkBox.selected)
			{
				attributeList.addItem(Constants.DERIVATIVE);
				spLabelPane.derivativeChkBox.selected = false;
			}
			
		}
		private function pasteSPData(event:Event):void
		{
			if(copyFromIndex!=-1)
			{
				var spDataCopyFrom:SpecimenData = SpecimenData(specimenColl.getItemAt(copyFromIndex));
				for(var i:int;i<specimenColl.length;i++)
				{
					var spData:SpecimenData = SpecimenData(specimenColl.getItemAt(i));
					if(spData.isSelected)
					{
						spData.copy(spDataCopyFrom);
						if(A[i] != null)
						{
							A[i].switchSpType(null);
							spData.specimenType = spDataCopyFrom.specimenType;
						}
						spData.isSelected = false;
					}
				}
			}
			else
			{
				if(attributeList != null && attributeList.length>0)
				{
					if(specimenColl != null && specimenColl.length>1)
					{
						var spDataFrom:SpecimenData = SpecimenData(specimenColl.getItemAt(0));
						for(var j:int=1;j<specimenColl.length;j++)
						{
							var spDataTo:SpecimenData = SpecimenData(specimenColl.getItemAt(j));
							if(spDataTo.isSelected)
							{
								spDataTo.copyAttributes(spDataFrom,attributeList);
								if(attributeList.contains(Constants.CLASS))
								{
									if(A[j] != null)
									{
										A[j].switchSpType(null);
										spDataTo.specimenType = spDataFrom.specimenType;
									}
								}
								spDataTo.isSelected = false;
							}
						}
					}
				}
			}
		}
		
		private function submitSpecimen(event:Event):void
		{
			var validateVal:Boolean = true;	
			for(var i:int=0;i<specimenColl.length;i++)
			{	
				var specimenData:SpecimenData = specimenColl.getItemAt(i) as SpecimenData;
				specimenData.mode = mspParameter.mode;
				validateVal = specimenData.validate() && validateVal;
			}
			
		
			if(validateVal)
			{
				if(mspParameter.mode == MSPParameter.MODE_PARAM_VAL_ADD)
				{
					myRemoteObject.writeSpecimen(specimenColl);
				}
				else
				{
					var specimenCollForEdit:ArrayCollection = getCollectionForEdit(specimenColl);
					myRemoteObject.editSpecimen(specimenCollForEdit,null);
				}
				
			}
			else
			{
				Alert.show("Prosím vyřešte všechny problémy označené červeným rámečkem.");
			}
		}
		private function getCollectionForEdit(specimenColl:ArrayCollection):ArrayCollection
		{
			var specimenCollForEdit:ArrayCollection = new ArrayCollection();
			for(var j:int = 0; j<specimenColl.length;j++)
			{
				var specimenData:SpecimenData = specimenColl.getItemAt(j) as SpecimenData;
				var specimenDatForEdit:SpecimenData = new SpecimenData();
				specimenDatForEdit.spID = specimenData.spID;
				specimenDatForEdit.specimenLabel = specimenData.specimenLabel;
				specimenDatForEdit.specimenBarcode = specimenData.specimenBarcode;
				specimenDatForEdit.creationDate = specimenData.creationDate;
				specimenDatForEdit.tissueSide = specimenData.tissueSide;
				specimenDatForEdit.tissueSite = specimenData.tissueSite;
				specimenDatForEdit.pathologicalStatus = specimenData.pathologicalStatus;
				specimenDatForEdit.comment = specimenData.comment;
				specimenDatForEdit.quantity = specimenData.quantity;
				specimenDatForEdit.concentration = specimenData.concentration;
				specimenDatForEdit.derivedSpColl = specimenData.derivedSpColl;
				specimenDatForEdit.exIdColl = specimenData.exIdColl;
				specimenDatForEdit.biohazardColl = specimenData.biohazardColl;
				specimenCollForEdit.addItem(specimenDatForEdit);
			}
			return specimenCollForEdit;
		}
		
		private function handleReadSpecimen(event:ResultEvent):void
   		{
   			//var obj:SpecimenData = SpecimenData(event.result);
   			//Alert.show('Result '+obj);
   			//printSpDetails(obj);
   		}
   		
   		private function handleWriteSpecimen(event:ResultEvent):void
   		{
   			var obj:Object = event.result;
   			var message:String = obj.toString();
   			messageText.text = message;
   			var f:String = "callSubmitSpecimen";
		    ExternalInterface.call(f);

   		}
   		private function handleEditSpecimen(event:ResultEvent):void
   		{
   			var obj:Object = event.result;
   			var message:String = obj.toString();
   			var subMessage:String = message.substr(0,7);
   			if(subMessage == "success")
	   			messageText.styleName = "successMessageStyle";
	   		else
	   			messageText.styleName = "errorMessageStyle";	
	   			
   			messageText.text = message.substr(8,message.length);
   			var f:String = "callUpdateSpecimen";
		    ExternalInterface.call(f);

   		}

   		private function handleInitMultipleSp(event:ResultEvent) : void
   		{
   			specimenDataBean = event.result as SpecimenData;

   			metadataManager.init(mspParameter.mode);
						
			metadataManager.addEventListener("initCompleteEvent",init);
			if(mspParameter.showParentSelection == "true")
			{
				showParentSelection = true;
			}
			else
			{
				if(mspParameter.showParentSelection == "false")
				{
					showParentSelection = false;
				}
			}
   		}
   		
   		private function getAlternateColor(index:int):uint 
   		{
   			if(index%2==0)
   			{
   				return 0xF0F8FF;
   			}	
   			else
   			{
   				return 0xF0F8FF;
   			}
   		}
   		
   		private function setParentLabel(name:String):void
   		{
   			spLabelPane.spOrScg.text = name;
   			for(var i:int=0;i<specimenColl.length;i++)
   			{
   				var spData:SpecimenData = SpecimenData(specimenColl.getItemAt(i));
   				if(isSpParentName.selected)
	   			{
	   				spData.parentType = Constants.DERIVED_SPECIMEN;
	   				mspParameter.parentType = MSPParameter.PARENT_TYPE_PARAM_VAL_SP;
	   				refreshParentLabel(spData);
	   				if(A[i] != null)
                    {
                    	if(actualParentType == "New_Specimen")
                    	{
                       		A[i].changeSpParentName();
                       	}
                       	else
                       	{
                       		A[i].diableSpParentName();
                       	}
                    }

	   			}
	   			else
	   			{
	   				spData.parentType = Constants.NEW_SPECIMEN;
	   				mspParameter.parentType = MSPParameter.PARENT_TYPE_PARAM_VAL_SCG;
	   				refreshSCGLabel(spData);
	   				if(A[i] != null && mspParameter.parentName != "")
                    {
                    	if(actualParentType == "Derived_Specimen")
                    	{
                         	A[i].changeSCGName(); //mspParameter.parentName=="" means specimens ar getting added through specimen - multiple
                         }
                         else
                         {
                         	A[i].disableSCGName();
                         }
                    }


	   			}
	   			if(A[i] != null)
		   			A[i].specimenParentChanges(mspParameter.parentType);
		   	//	model.filteredCollection.refresh();
		   		spLabelPane.specimenParentChanges(mspParameter.parentType);
  			}

   		}
   		private function refreshParentLabel(spData:SpecimenData):void
   		{
   			if(actualParentType == "Derived_Specimen")
   			{
   				 spData.parentName = actualParentName;//mspParameter.parentName;
		   	     if(mspParameter.parentName != "")
		   	     {
		   		   spData.isParentEnabled = false;
		   		 }
   			}
   			else
   			{
	   			 spData.parentName = "";
		   		 spData.isParentEnabled = true;
	   		}
	   	}

	   	private function refreshSCGLabel(spData:SpecimenData):void
   		{
   			if(actualParentType == "New_Specimen")
   			{
   				 spData.parentName = actualParentName;//mspParameter.parentName;
		   	     if(mspParameter.parentName != "")
		   	     {
		   		   	spData.isParentEnabled = false;
		   		 }
   			}
   			else
   			{
   					spData.parentName = "";
		   		 	spData.isParentEnabled = true;
   			}

   		}
   		public function setPagination():void
		{
			paginateData.paginate(model.collection, this.hbContainer, model.pageLimit);
		}
		public function getMSParameter() : MSPParameter
		{
			return mspParameter;	
			
		}
	]]>
</mx:Script>

	<mx:RemoteObject id="myRemoteObject" destination="cdeService" showBusyCursor="true" >
		<mx:method name="writeSpecimen" result="handleWriteSpecimen(event)"/>
		<mx:method name="readSpecimen" result="handleReadSpecimen(event)"/>
		<mx:method name="editSpecimen" result="handleEditSpecimen(event)"/>
		<mx:method name="initFlexInterfaceForMultipleSp" result="handleInitMultipleSp(event)"/>

	</mx:RemoteObject>
	<mx:Text id="messageText" styleName="successMessageStyle" fontSize="12"/>
	<mx:HBox id="selectionBox">
		<mx:Text text="Chcete vytvořit Nový vzorek nebo Odvozený vzorek?" fontWeight="bold"/>
		<mx:RadioButtonGroup id="spParent"/>
		<mx:RadioButton id="isSpSCGName" label="Nový vzorek"  group="{spParent}" click="setParentLabel('* Název Kolekce vzorků')" fontWeight="bold"/>
		<mx:RadioButton id="isSpParentName" label="Odvozený vzorek" group="{spParent}" click="setParentLabel('* Název Nadřezeného ')" fontWeight="bold"/>
	</mx:HBox>
	<mx:HBox>
		<mx:Button label="Kopírovat" click="copySPData(event)" toolTip="Kopírovat" borderColor="#AAAAFF"/>
		<mx:Button label="Vložit" click="pasteSPData(event)" toolTip="Vložit" borderColor="#AAAAFF"/>
		<mx:Spacer width="40"/>
		<mx:Button id="addMoreBtn" label="Přidat další" click="addMoreSpecimen(event)" toolTip="Přidat další" borderColor="#AAAAFF"/>
		<mx:Button id="deleteBtn" label="Odstranit" click="deleteSpecimen(event)" toolTip="Odstranit" borderColor="#AAAAFF"/>	
		<mx:Spacer width="40"/>
		<mx:Button label="Odeslat" click="submitSpecimen(event)" id="submitButton" toolTip="Odeslat" borderColor="#AAAAFF"/>
	</mx:HBox>
	<mx:HBox id="hbContainer"  width="100%" />
	<mx:HBox>
	
		<components:SpecimenLabelPane backgroundColor="#F0F8FF" id="spLabelPane" mspParameter="{getMSParameter()}"/>

		<mx:Repeater id="spRepeater" dataProvider="{model.filteredCollection}" >	
			<components:SpecimenPane id="A" backgroundColor="{getAlternateColor(spRepeater.currentIndex)}" mspParameter="{getMSParameter()}"/>
		</mx:Repeater>
	</mx:HBox>
	
</mx:Application>
