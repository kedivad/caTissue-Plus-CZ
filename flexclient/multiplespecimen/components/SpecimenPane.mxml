<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="*"
	xmlns:adobe="http://www.adobe.com/2006/fc" preinitialize="preInit()" creationComplete="creationComp()" xmlns:components="components.*" autoLayout="true">
<mx:Script source="../script/validate.as"/>
<mx:Script>
	<![CDATA[
		import util.MetadataModel;
		import util.Utility;
		import util.Constants;
		import util.MSPParameter;
		import valueobjects.SpecimenData;
		import mx.binding.utils.BindingUtils;
		import mx.controls.Alert;
		import mx.collections.ArrayCollection;
		import mx.managers.PopUpManager;
		import flash.xml.*;
		import mx.controls.List;
		[Bindable]	public var spData:SpecimenData;
		[Bindable]	public var mspParameter:MSPParameter;
		[Bindable]	public var specimenNo:String;


		[Bindable] public var specimenClassList:ArrayCollection;
		[Bindable] public var specimenTypeList:ArrayCollection;
		[Bindable] public var tissueSiteList:ArrayCollection;
		[Bindable] public var tissueSideList:ArrayCollection;
		[Bindable] public var pathologicalStatusList:ArrayCollection;
		[Bindable] public var prevSpecimenClassValue:String;





		private function preInit():void
		{
			spData = parentApplication.spRepeater.currentItem;
			initAllDataProviderList();
			var index:int = parentApplication.specimenColl.getItemIndex(spData)+1;
			specimenNo = "Vzorek "+index;
			switchSpType(null);

		}
		private function initAllDataProviderList() : void
		{
			this.specimenClassList = new ArrayCollection(MetadataModel.getInstance().specimenClassPVList.toArray());
			this.prevSpecimenClassValue = spData.specimenClass;
			this.specimenTypeList = new ArrayCollection(MetadataModel.getInstance().getSpecimenTypeCollection(spData.specimenClass).toArray());
			this.tissueSiteList = new ArrayCollection(MetadataModel.getInstance().tissueSitePVList.toArray());
			this.tissueSideList = new ArrayCollection(MetadataModel.getInstance().tissueSidePVList.toArray());
			this.pathologicalStatusList = new ArrayCollection(MetadataModel.getInstance().pathologicalStatusPVList.toArray());
		}
		public function creationComp():void
		{
			bindData();

			if(spData.lineage == Constants.DERIVED || spData.lineage == Constants.ALIQUOT)
			{
				tissueSiteBox.enabled = false;
				tissueSideBox.enabled = false;
				pathStatusBox.enabled = false;
			}
			if(spData.specimenClass == Constants.MOLECULAR)
			{
				spConcentration.enabled = true;
			}
			else
			{
				spConcentration.enabled = false;
			}

			if(!spData.isParentEnabled)
				spParentName.enabled = false;

			if(mspParameter.mode == MSPParameter.MODE_PARAM_VAL_ADD)
			{
				chkLabelAndBarcodeAutoGenerated();
			}
			if(mspParameter.mode == MSPParameter.MODE_PARAM_VAL_EDIT)
			{
				spParentNameBox.visible = false;
				spParentNameBox.height = 0;
				storageContBox.visible= false;
				storageContBox.height = 0;

				specimenAccordion.removeChild(collEventBox);
				specimenAccordion.removeChild(recEventBox);
				spClass.enabled = false;
				spType.enabled = false;
			}
			else
			{
				specimenParentChanges(mspParameter.parentType,false);
			}
			initClassFactory();

		}
		public function specimenParentChanges(parentType:String,accordianChanges:Boolean=true):void
		{
			if(parentType == MSPParameter.PARENT_TYPE_PARAM_VAL_SP)
			{
				tissueSiteBox.visible = false;
				tissueSiteBox.height = 0;

				tissueSideBox.visible = false;
				tissueSideBox.height = 0;

				pathStatusBox.visible = false;
				pathStatusBox.height = 0;

				specimenAccordion.removeChild(collEventBox);
				specimenAccordion.removeChild(recEventBox);
			}
			else
			{
				tissueSiteBox.visible = true;
				tissueSiteBox.height = 25;
				tissueSideBox.visible = true;
				tissueSideBox.height = 25;
				pathStatusBox.visible = true;
				pathStatusBox.height = 25;
				if(accordianChanges)
				{
					specimenAccordion.addChildAt(collEventBox,1);
					specimenAccordion.addChildAt(recEventBox,2);
				}
			}
		}


		private function bindData() : void
		{
			//Check box
			Utility.bindData(isCopy, "selected", spData, "isSelected");
			//Parent Specimen
			Utility.bindData(spParentName, "text", spData, "parentName");
			Utility.bindData(spParentName, "errorString", spData,"parentNameErrStr");
			//Label
			Utility.bindData(spLabel, "text", spData,"specimenLabel");
			Utility.bindData(spLabel, "errorString", spData,"specimenLabelErrStr");
			//Barcode
			Utility.bindData(spBarCode, "text", spData, "specimenBarcode");

			//Specimen Class
			Utility.bindData(spClass, "selectedItem", spData, "specimenClass");
			Utility.bindData(spClass, "errorString", spData,"specimenClassErrStr");

			//Specimen Type
			Utility.bindData(spType, "selectedItem", spData, "specimenType");
			Utility.bindData(spType, "errorString", spData,"specimenTypeErrStr");

			//Tissue Site
			Utility.bindData(spTissueSite, "selectedItem", spData, "tissueSite");
			Utility.bindData(spTissueSite, "errorString", spData,"tissueSiteErrStr");
			//Bind Strana odběru
			Utility.bindData(spTissueSide,"selectedItem",spData,"tissueSide");
			Utility.bindData(spTissueSide, "errorString", spData,"tissueSideErrStr");
			//Pathological Status
			Utility.bindData(spPathologicalStatus,"selectedItem",spData,"pathologicalStatus");
			Utility.bindData(spPathologicalStatus, "errorString", spData,"pathologicalStatusErrStr");
			//Bind Creation date
			Utility.bindData(spCreatedOn,"selectedDate",spData,"creationDate");

			//Bind Quantity
			Utility.bindData(spQuantity,"text",spData,"quantity");
			Utility.bindData(spQuantity, "errorString", spData,"quantityErrStr");
			//Bind Concentration
			Utility.bindData(spConcentration,"text",spData,"concentration");
			//bindData(spQuantity,"restrict",spConcentration,"text",false);

			//Bind Storage
			Utility.bindData(spStorage,"selectedItem",spData,"storage");

			//Bind Comments
			Utility.bindData(spComment, "text", spData, "comment");


		}
		private function chkLabelAndBarcodeAutoGenerated():void
		{
			if(mspParameter.showLabel == "false")
			{
				spLabelBox.visible = false;
				spLabel.text = "Vygenerováno";
				spLabelBox.height = 0;
			}
			if(mspParameter.showBarcode == "false")
			{
				spBarcodeBox.visible = false;
				spBarCode.text = "Vygenerováno";
				spBarcodeBox.height = 0;
			}
		}
		public function switchSpType(event:Event):void
		{
			specimenTypeList = new ArrayCollection(MetadataModel.getInstance().getSpecimenTypeCollection(spData.specimenClass).toArray());
			prevSpecimenClassValue = spData.specimenClass;
			spData.calcUnit();
			if(event != null)
			{
				if(spData.specimenClass == Constants.MOLECULAR)
				{
					spConcentration.enabled = true;
				}
				else
				{
					spConcentration.enabled = false;
				}
			}
		}
		private function focusChangeFunct(event:Event) : void
		{
			if(spClass.selectedItem != prevSpecimenClassValue)
			{
				switchSpType(event);
			}

		}
		private function calculateUnit(event:Event) : void
		{
				spData.calcUnit();

		}

		private function printSpDetails(spData:SpecimenData):void
		{
			Alert.show("PODROBNOSTI VZORKU: \n"+
					   "parentName: "+spData.parentName+"\n"+
					   "specimenLabel: "+spData.specimenLabel+"\n"+
					   "specimenBarcode: "+spData.specimenBarcode+"\n"+
					   "specimenClass: "+spData.specimenClass+"\n"+
					   "specimenType: "+spData.specimenType+"\n"+
					   "tissueSite: "+spData.tissueSite+"\n"+
					   "tissueSide: "+spData.tissueSide+"\n"+
					   "pathologicalStatus: "+spData.pathologicalStatus+"\n"+
					   "creationDate: "+spData.creationDate+"\n"+
					   "quantity: "+spData.quantity+"\n"+
					   "concentration: "+spData.concentration);
		}
		private function onClick(event:Event):void
		{
			//Alert.show(spParent.selectedValue+'')
			//printSpDetails(spData);
			if(isCopy.selected)
			{
				//myRemoteObject.writeSpecimen(spData);
			}
			else
			{
				//myRemoteObject.readSpecimen();
			}
			//spData.tissueSide = "Vpravo";
		}

		/*public function regularExpression(element:*, text:String):Boolean
   		{
      		var regExp:RegExp = new RegExp(text,"i");
      		return(regExp.test(mySTI.itemToLabel(element)));
   		}*/
   		private function bindExData():void
   		{
   			Utility.bindData(exIDPane, "exIdColl", spData, "exIdColl");
   		}
   		private function bindCollectedEvents():void
   		{
   			Utility.bindData(colledtedEventPane, "collectionEvent", spData, "collectionEvent");
   			//Alert.show("HI 1 "+collectionEvent.toString());
				//eventContentPane.collEvent = collectionEvent;
			colledtedEventPane.createComp();
   		}
   		private function bindReceivedEvents():void
   		{
   			Utility.bindData(receivedEventPane, "receivedEvent", spData, "receivedEvent");
   			//Alert.show("HI 1 "+collectionEvent.toString());
				//eventContentPane.collEvent = collectionEvent;
			receivedEventPane.createComp();
   		}

   		private function bindBiohazards() : void
   		{
   			Utility.bindData(biohazardPane,"biohazardColl", spData,"biohazardColl");
   		}

		private function createPopUp():void
		{
	    	var pop1:DerivedSpecimenPane = DerivedSpecimenPane(
	        PopUpManager.createPopUp(this, DerivedSpecimenPane, true));
    		pop1.derivedSpColl = spData.derivedSpColl;

//    		pop1.msParameter = mspParameter;
			pop1.title = "Vytvořit Odvozený vzorek";
			/* creating a new derived sp array collection in case of cancel button pressed on derived sp page */
			var tempDerivedSpColl:ArrayCollection = new ArrayCollection();
			for(var i:int=0;i<spData.derivedSpColl.length;i++)
			{
				var spDataTemp:SpecimenData = spData.derivedSpColl.getItemAt(i) as SpecimenData;
				var spDataDeepCopied:SpecimenData = spDataTemp.deepCopy();
				tempDerivedSpColl.addItem(spDataDeepCopied);
			}
    		pop1.derivedSpCollOriginal = tempDerivedSpColl;

	    	Utility.bindData(pop1,"derivedSpColl", spData,"derivedSpColl");

//	    PopUpManager.centerPopUp(pop1);


		   }

      public function changeSpParentName () :void
      {
         	spParentName.enabled = true;
            spParentName.text = "";
      }
      public function diableSpParentName () :void
      {
         	spParentName.enabled = false;
            //spParentName.text = "";
      }

      public function changeSCGName () :void
      {
         	spParentName.enabled = true;
      }
      public function disableSCGName () :void
      {
         	spParentName.enabled = false;
      }


		public function chkStorage() : void
		{
//			Alert.show("V této verzi je podporováno pouze virtuální úložiště.");
	//		spStorage.selectedItem = "Virtual"

		}


	]]>
</mx:Script>
	<mx:VBox backgroundColor="#E2EFFF" width="100%" id="MyBox">
		<components:MyCanvas >
			<mx:CheckBox id="isCopy" click="onClick(event)"/>
			<mx:Label text="{specimenNo}" x="25"/>
		</components:MyCanvas>
		<components:MyCanvas id="spParentNameBox">
			<mx:TextInput id="spParentName" width="160" toolTip="{spData.parentName}"/>
		</components:MyCanvas>
		<components:MyCanvas id="spLabelBox">
			<mx:TextInput id="spLabel"/>
		</components:MyCanvas>
		<components:MyCanvas id="spBarcodeBox">
			<mx:TextInput id="spBarCode"/>
		</components:MyCanvas>
	</mx:VBox>


	<components:MyCanvas>
	<adobe:AutoComplete id="spClass" dataProvider="{specimenClassList}" change="switchSpType(event)" focusOut="focusChangeFunct(event)" lookAhead="true" dropdownFactory="{myDropdownFactory}"/>
	</components:MyCanvas>

	<components:MyCanvas>
		<adobe:AutoComplete id="spType" dataProvider="{specimenTypeList}" lookAhead="true" change="calculateUnit(event)" focusOut="calculateUnit(event)" dropdownFactory="{myDropdownFactory}"/>
	</components:MyCanvas>

	<components:MyCanvas id="tissueSiteBox">
		<adobe:AutoComplete id="spTissueSite" dataProvider="{tissueSiteList}" lookAhead="true" dropdownFactory="{myDropdownFactory}"/>
	</components:MyCanvas>

	<components:MyCanvas id="tissueSideBox">
	<adobe:AutoComplete id="spTissueSide" dataProvider="{tissueSideList}" lookAhead="true" dropdownFactory="{myDropdownFactory}"/>

	</components:MyCanvas>

	<components:MyCanvas id="pathStatusBox">
		<adobe:AutoComplete id="spPathologicalStatus" dataProvider="{pathologicalStatusList}" lookAhead="true" dropdownFactory="{myDropdownFactory}"/>
	</components:MyCanvas>

	<mx:VBox backgroundColor="#E2EFFF" width="100%">

		<components:MyCanvas id="createdOnBox">
			<mx:DateField id="spCreatedOn"  formatString="{mspParameter.dateFormat}" yearNavigationEnabled="true" keyDown="spCreatedOn.open()"/>
		</components:MyCanvas>

		<components:MyCanvas>
			<mx:HBox>
				<mx:TextInput id="spQuantity" width="50" restrict="[0-9].e"/>
				<mx:Label text="{spData.unit}"/>
			</mx:HBox>
		</components:MyCanvas>

		<components:MyCanvas>
			<mx:HBox>
				<mx:TextInput id="spConcentration" width="50" restrict="[0-9]."/>
				<mx:Label htmlText="{Constants.UNIT_CONCENTRATION}"/>
			</mx:HBox>
		</components:MyCanvas>
		<components:MyCanvas id="storageContBox">
			<adobe:AutoComplete id="spStorage" dataProvider="{MetadataModel.getInstance().storageList}" lookAhead="true" change="chkStorage()" dropdownFactory="{myDropdownFactory}"/>
		</components:MyCanvas>

	</mx:VBox>

	<mx:Accordion id="specimenAccordion" resizeToContent="true" backgroundColor="#E2EFFF" headerHeight="25" >
		<mx:VBox label="Poznámka">
			<mx:TextArea id="spComment"/>
		</mx:VBox>
		<mx:VBox label="Událost sběru" id="collEventBox">
			<components:CollectedEventPane id="colledtedEventPane" creationComplete="bindCollectedEvents()" />
		</mx:VBox >
		<mx:VBox label="Událost obdržení" id="recEventBox">
			<components:ReceivedEventPane id="receivedEventPane" creationComplete="bindReceivedEvents()" />
		</mx:VBox >

		<mx:VBox label="Externí identifikátor">
			<components:ExternalIdentifierPane id="exIDPane" creationComplete="bindExData()" />
		</mx:VBox>

		<mx:VBox label="Bilogické nebezpečí">
			<components:BiohazardPane id="biohazardPane" creationComplete="bindBiohazards()"/>
		</mx:VBox>
	</mx:Accordion>
	<mx:Button id="derivativeBtn" label="Derivát" width="{specimenAccordion.width}" click="createPopUp()" height="25"/>


</mx:VBox>