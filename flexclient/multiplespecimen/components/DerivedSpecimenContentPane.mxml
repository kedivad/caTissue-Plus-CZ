<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="*"  
	xmlns:adobe="http://www.adobe.com/2006/fc" preinitialize="preInit()" creationComplete="creationComp()" xmlns:components="components.*" xmlns:components1="flexclient.multiplespecimen.components.*" borderStyle="solid" paddingLeft="5" paddingRight="5">
<mx:Script source="../script/validate.as"/>
<mx:Script>
	<![CDATA[
		import util.MetadataModel;
		import util.Utility;
		import util.Constants;
		import valueobjects.SpecimenData;
		import mx.binding.utils.BindingUtils;
		import mx.controls.Alert;
		import mx.collections.ArrayCollection;
		import mx.managers.PopUpManager;
		import util.MSPParameter;
		[Bindable]	public var derivedData:SpecimenData ;
		[Bindable]	public var msParamter:MSPParameter;
		[Bindable] public var prevSpecimenClassValue:String;
		
		
		[Bindable] public var specimenClassList:ArrayCollection;

		private function preInit():void
		{
			initAllDataProviderList();
			
			
		}
		private function initAllDataProviderList() : void
		{
			this.specimenClassList = new ArrayCollection(MetadataModel.getInstance().specimenClassPVList.toArray());
		
		}
		private function creationComp():void
		{
			this.prevSpecimenClassValue = derivedData.specimenClass;
			switchSpType(null);
			
			bindData();
			chkLabelAndBarcodeAutoGenerated();
			initClassFactory();


		}
		private function bindData() : void
		{
			//Check box
			Utility.bindData(isCopy, "selected", derivedData, "isSelected");

			//Label
			Utility.bindData(spLabel, "text", derivedData,"specimenLabel");
			Utility.bindData(spLabel, "errorString", derivedData,"specimenLabelErrStr");
			//Barcode
			Utility.bindData(spBarCode, "text", derivedData, "specimenBarcode");
		
			//Specimen Class
			Utility.bindData(spClass, "selectedItem", derivedData, "specimenClass");
			Utility.bindData(spClass, "errorString", derivedData,"specimenClassErrStr");
			
			//Specimen Type
			Utility.bindData(spType, "selectedItem", derivedData, "specimenType");
			Utility.bindData(spType, "errorString", derivedData,"specimenTypeErrStr");

			//Bind Creation date
			Utility.bindData(spCreatedOn,"selectedDate",derivedData,"creationDate");
			
			//Bind Quantity
			Utility.bindData(spQuantity,"text",derivedData,"quantity");
			Utility.bindData(spQuantity, "errorString", derivedData,"quantityErrStr");
			
			//Bind Concentration
			Utility.bindData(spConcentration,"text",derivedData,"concentration");
			//bindData(spQuantity,"restrict",spConcentration,"text",false);

			//Bind Storage
			Utility.bindData(spStorage,"selectedItem",derivedData,"storage");
			
			//Bind Comments
			Utility.bindData(spComment, "text", derivedData, "comment");


		}
		private function chkLabelAndBarcodeAutoGenerated():void
		{
			if(msParamter != null)
			{
				if(msParamter.showLabel == "false")
				{
					spLabelBox.visible = false;
					spLabel.text = "Vygenerováno";
					spLabelBox.height = 0;
				}
				if(msParamter.showBarcode == "false")
				{
					spBarcodeBox.visible = false;
					spBarCode.text = "Vygenerováno";
					spBarcodeBox.height = 0;
				}
			}
		}
		private function bindExData():void
   		{
   			Utility.bindData(exIDPane, "exIdColl", derivedData, "exIdColl");
   		}
		
		private function switchSpType(event:Event):void
		{
			derivedData.specimenTypePVList = MetadataModel.getInstance().getSpecimenTypeCollection(derivedData.specimenClass);
			prevSpecimenClassValue = derivedData.specimenClass; 
			derivedData.calcUnit();
			if(event != null)
			{
				if(spClass.selectedItem == Constants.MOLECULAR)
				{
					spConcentration.enabled = true;
				}
				else
				{
					spConcentration.enabled = false;
				}
			}
		}
		
		
		private function calculateUnit(event:Event) : void
		{
				derivedData.calcUnit();
			
		}
		private function focusChangeFunct(event:Event) : void
		{
			if(spClass.selectedItem != prevSpecimenClassValue)
			{
				switchSpType(event);
			}
			
		}
		private function printSpDetails(derivedData:SpecimenData):void
		{
			Alert.show("PODROBNOSTI VZORKU: \n"+
					   "parentName: "+derivedData.parentName+"\n"+
					   "specimenLabel: "+derivedData.specimenLabel+"\n"+
					   "specimenBarcode: "+derivedData.specimenBarcode+"\n"+
					   "specimenClass: "+derivedData.specimenClass+"\n"+
					   "specimenType: "+derivedData.specimenType+"\n"+
					   "tissueSite: "+derivedData.tissueSite+"\n"+
					   "tissueSide: "+derivedData.tissueSide+"\n"+
					   "pathologicalStatus: "+derivedData.pathologicalStatus+"\n"+
					   "creationDate: "+derivedData.creationDate+"\n"+
					   "quantity: "+derivedData.quantity+"\n"+
					   "concentration: "+derivedData.concentration);
		}
		
		
		
   		
   	
   		
   		
/*   		public function validateDerivedSpecimen(index:int):Boolean
   		{
   			var isValid:Boolean = true;
   			var specimenNumber :String = " for specimen "+index;
   			isValid= validateRequiredField(spLabel,"text","Prosím zadejte label") && isValid;
//   			isValid= validateRequiredField(spBarCode,"text",Zadejte Čárový kód") && isValid;

			isValid = validateComboBoxField(spClass,"selectedItem","Vyberte Třídu") && isValid;
			isValid = validateComboBoxField(spType,"selectedItem","Vyberte Typ") && isValid;
			
   			isValid =  validateNumberField(spQuantity,"text","Zadejte Množství",true,0) && isValid;
   			isValid =  validateNumberField(spConcentration,"text","Zadejte Koncentraci",true,0) && isValid;
   			if(exIDPane != null)
			{
				isValid = exIDPane.validateExIds(index) && isValid;
			}
			return isValid;
		}     */                

		public function chkStorage() : void
		{
/*			if(msParamter.mode == MSPParameter.MODE_PARAM_VAL_EDIT)
			{
				Alert.show("V této verzi je podporováno pouze virtuální úložiště.");
				spStorage.selectedItem = "Virtual"
			}*/
			
		}


	]]>
</mx:Script>
	

<components:MyCanvas>
		<mx:CheckBox id="isCopy" />
	</components:MyCanvas>
	
	<components:MyCanvas id="spLabelBox">
		<mx:TextInput id="spLabel"/>
	</components:MyCanvas>
	
	
	<components:MyCanvas>
		<adobe:AutoComplete id="spClass" dataProvider="{specimenClassList}" change="switchSpType(event)" focusOut="focusChangeFunct(event)" dropdownFactory="{myDropdownFactory}"/>
	</components:MyCanvas>
		
	<components:MyCanvas>
		<adobe:AutoComplete id="spType" dataProvider="{derivedData.specimenTypePVList}" lookAhead="true" change="calculateUnit(event)" dropdownFactory="{myDropdownFactory}"/>
	</components:MyCanvas>

	
	<components:MyCanvas>
		<mx:DateField id="spCreatedOn" formatString="{msParamter.dateFormat}" keyDown="spCreatedOn.open()" yearNavigationEnabled="true"/>
	</components:MyCanvas>
	<components:MyCanvas>
		<mx:HBox>
			<mx:TextInput id="spConcentration" width="50" restrict="[0-9]." enabled="false"/>
			<mx:Label htmlText="{Constants.UNIT_CONCENTRATION}"/>
		</mx:HBox>
	</components:MyCanvas>
	
	<components:MyCanvas>
		<mx:HBox>
			<mx:TextInput id="spQuantity" width="50" restrict="[0-9]."/>
			<mx:Label text="{derivedData.unit}"/>
		</mx:HBox>
	</components:MyCanvas>
		<components:MyCanvas id="spBarcodeBox">
		<mx:TextInput id="spBarCode" />
	</components:MyCanvas>
	
	<components:MyCanvas id="storageContBox">
		<adobe:AutoComplete id="spStorage" dataProvider="{MetadataModel.getInstance().storageList}" lookAhead="true" change="chkStorage()" dropdownFactory="{myDropdownFactory}"/>
	</components:MyCanvas>

	<components:MyCanvas>
		<mx:TextArea id="spComment"/>
	</components:MyCanvas>
	<mx:Accordion id="derivativeAccordion" resizeToContent="true" backgroundColor="#E2EFFF" headerHeight="25">
		<mx:VBox label="External Identifier">
			<components:ExternalIdentifierPane id="exIDPane" creationComplete="bindExData()" />
		</mx:VBox>
	</mx:Accordion>	
	
</mx:VBox>