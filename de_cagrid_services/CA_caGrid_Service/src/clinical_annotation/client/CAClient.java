
package clinical_annotation.client;

import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;

import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;

import clinical_annotation.common.CAI;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.2
 */
public class CAClient extends CAClientBase implements CAI
{

	public CAClient(String url) throws MalformedURIException, RemoteException
	{
		this(url, null);
	}

	public CAClient(String url, GlobusCredential proxy) throws MalformedURIException,
			RemoteException
	{
		super(url, proxy);
	}

	public CAClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException
	{
		this(epr, null);
	}

	public CAClient(EndpointReferenceType epr, GlobusCredential proxy)
			throws MalformedURIException, RemoteException
	{
		super(epr, proxy);
	}

	public static void usage()
	{
		System.out.println(CAClient.class.getName() + " -url <service url>");
	}

	public static void main(String[] args)
	{
		System.out.println("Running the Grid Service Client");
		try
		{
			if (!(args.length < 2))
			{
				if (args[0].equals("-url"))
				{
					CAClient client = new CAClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....
					for (int i = 2; i < args.length; i++)
					{
						String cqlFileName = args[i];
						System.out.println("Running query: " + cqlFileName);
						try
						{
							CQLQuery query = (CQLQuery) Utils.deserializeDocument(cqlFileName,
									CQLQuery.class);
							CQLQueryResults cqlQueryResult = client.query(query);
							printResults(cqlQueryResult);

						}
						catch (Exception e)
						{
							e.printStackTrace();
						}
					}
				}
				else
				{
					usage();
					System.exit(1);
				}
			}
			else
			{
				usage();
				System.exit(1);
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
			System.exit(1);
		}
	}

	private static void printResults(CQLQueryResults cqlQueryResult)
	{
		CQLQueryResultsIterator iter = new CQLQueryResultsIterator(cqlQueryResult, true);
		if (!iter.hasNext())
		{
			System.out.println("No Result Found");
		}
		while (iter.hasNext())
		{
			System.out.println("\n" + iter.next());
		}
	}

	public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(
			org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params)
			throws RemoteException
	{
		synchronized (portTypeMutex)
		{
			configureStubSecurity((Stub) portType, "getMultipleResourceProperties");
			return portType.getMultipleResourceProperties(params);
		}
	}

	public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(
			javax.xml.namespace.QName params) throws RemoteException
	{
		synchronized (portTypeMutex)
		{
			configureStubSecurity((Stub) portType, "getResourceProperty");
			return portType.getResourceProperty(params);
		}
	}

	public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(
			org.oasis.wsrf.properties.QueryResourceProperties_Element params)
			throws RemoteException
	{
		synchronized (portTypeMutex)
		{
			configureStubSecurity((Stub) portType, "queryResourceProperties");
			return portType.queryResourceProperties(params);
		}
	}

	public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(
			gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException,
			gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType,
			gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType
	{
		synchronized (portTypeMutex)
		{
			configureStubSecurity((Stub) portType, "query");
			gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
			gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
			cqlQueryContainer.setCQLQuery(cqlQuery);
			params.setCqlQuery(cqlQueryContainer);
			gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
			return boxedResult.getCQLQueryResultCollection();
		}
	}

}
